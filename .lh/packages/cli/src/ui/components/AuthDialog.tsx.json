{
    "sourceFile": "packages/cli/src/ui/components/AuthDialog.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753935766587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753935766587,
            "name": "Commit-0",
            "content": "/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport React, { useState } from 'react';\nimport { Box, Text, useInput } from 'ink';\nimport { Colors } from '../colors.js';\nimport { RadioButtonSelect } from './shared/RadioButtonSelect.js';\nimport { LoadedSettings, SettingScope } from '../../config/settings.js';\nimport { AuthType } from '@google/gemini-cli-core';\nimport { validateAuthMethod } from '../../config/auth.js';\n\ninterface AuthDialogProps {\n  onSelect: (authMethod: AuthType | undefined, scope: SettingScope) => void;\n  settings: LoadedSettings;\n  initialErrorMessage?: string | null;\n}\n\nfunction parseDefaultAuthType(\n  defaultAuthType: string | undefined,\n): AuthType | null {\n  if (\n    defaultAuthType &&\n    Object.values(AuthType).includes(defaultAuthType as AuthType)\n  ) {\n    return defaultAuthType as AuthType;\n  }\n  return null;\n}\n\nexport function AuthDialog({\n  onSelect,\n  settings,\n  initialErrorMessage,\n}: AuthDialogProps): React.JSX.Element {\n  const [errorMessage, setErrorMessage] = useState<string | null>(() => {\n    if (initialErrorMessage) {\n      return initialErrorMessage;\n    }\n\n    const defaultAuthType = parseDefaultAuthType(\n      process.env.GEMINI_DEFAULT_AUTH_TYPE,\n    );\n\n    if (process.env.GEMINI_DEFAULT_AUTH_TYPE && defaultAuthType === null) {\n      return (\n        `Invalid value for GEMINI_DEFAULT_AUTH_TYPE: \"${process.env.GEMINI_DEFAULT_AUTH_TYPE}\". ` +\n        `Valid values are: ${Object.values(AuthType).join(', ')}.`\n      );\n    }\n\n    if (\n      process.env.GEMINI_API_KEY &&\n      (!defaultAuthType || defaultAuthType === AuthType.USE_GEMINI)\n    ) {\n      return 'Existing API key detected (GEMINI_API_KEY). Select \"Gemini API Key\" option to use it.';\n    }\n    return null;\n  });\n  const items = [\n    {\n      label: 'Login with Google',\n      value: AuthType.LOGIN_WITH_GOOGLE,\n    },\n    ...(process.env.CLOUD_SHELL === 'true'\n      ? [\n          {\n            label: 'Use Cloud Shell user credentials',\n            value: AuthType.CLOUD_SHELL,\n          },\n        ]\n      : []),\n    {\n      label: 'Use Gemini API Key',\n      value: AuthType.USE_GEMINI,\n    },\n    { label: 'Vertex AI', value: AuthType.USE_VERTEX_AI },\n  ];\n\n  const initialAuthIndex = items.findIndex((item) => {\n    if (settings.merged.selectedAuthType) {\n      return item.value === settings.merged.selectedAuthType;\n    }\n\n    const defaultAuthType = parseDefaultAuthType(\n      process.env.GEMINI_DEFAULT_AUTH_TYPE,\n    );\n    if (defaultAuthType) {\n      return item.value === defaultAuthType;\n    }\n\n    if (process.env.GEMINI_API_KEY) {\n      return item.value === AuthType.USE_GEMINI;\n    }\n\n    return item.value === AuthType.LOGIN_WITH_GOOGLE;\n  });\n\n  const handleAuthSelect = (authMethod: AuthType) => {\n    const error = validateAuthMethod(authMethod);\n    if (error) {\n      setErrorMessage(error);\n    } else {\n      setErrorMessage(null);\n      onSelect(authMethod, SettingScope.User);\n    }\n  };\n\n  useInput((_input, key) => {\n    if (key.escape) {\n      // Prevent exit if there is an error message.\n      // This means they user is not authenticated yet.\n      if (errorMessage) {\n        return;\n      }\n      if (settings.merged.selectedAuthType === undefined) {\n        // Prevent exiting if no auth method is set\n        setErrorMessage(\n          'You must select an auth method to proceed. Press Ctrl+C twice to exit.',\n        );\n        return;\n      }\n      onSelect(undefined, SettingScope.User);\n    }\n  });\n\n  return (\n    <Box\n      borderStyle=\"round\"\n      borderColor={Colors.Gray}\n      flexDirection=\"column\"\n      padding={1}\n      width=\"100%\"\n    >\n      <Text bold>Get started</Text>\n      <Box marginTop={1}>\n        <Text>How would you like to authenticate for this project?</Text>\n      </Box>\n      <Box marginTop={1}>\n        <RadioButtonSelect\n          items={items}\n          initialIndex={initialAuthIndex}\n          onSelect={handleAuthSelect}\n          isFocused={true}\n        />\n      </Box>\n      {errorMessage && (\n        <Box marginTop={1}>\n          <Text color={Colors.AccentRed}>{errorMessage}</Text>\n        </Box>\n      )}\n      <Box marginTop={1}>\n        <Text color={Colors.Gray}>(Use Enter to select)</Text>\n      </Box>\n      <Box marginTop={1}>\n        <Text>Terms of Services and Privacy Notice for Gemini CLI</Text>\n      </Box>\n      <Box marginTop={1}>\n        <Text color={Colors.AccentBlue}>\n          {\n            'https://github.com/aigo666/gemini-cli-new/blob/main/docs/tos-privacy.md'\n          }\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n"
        }
    ]
}